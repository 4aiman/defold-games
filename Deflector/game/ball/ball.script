local data = require ("main.data")

local TILE_SIZE = 64
local TILE_HALF = 32
local SPEED = 4

go.property("startpos", vmath.vector3(0, 0, 0))
go.property("startvel", vmath.vector3(0, 0, 0))

function init(self)
    msg.post(".", "acquire_input_focus")
	self.startpos = go.get_position()
	self.velocity = vmath.vector3(self.startvel.x, self.startvel.y, self.startvel.z)
	self.levelurl = string.format("level%d:/map#tilemap", data.level)
	self.goal = false
	msg.post(".", "position", {position = self.startpos})
end

local function move(self)
	local p = go.get_position()
	p = p + (self.velocity * SPEED)
	go.set_position(p)
end

local function setposition(pos)
	local p = pos * TILE_SIZE
	p.x = p.x - TILE_HALF
	p.y = p.y - TILE_HALF	
	p.z = 1
	go.set_position(p)
end

local function reset(self)
	self.goal = false
	setposition(self.startpos)
	self.velocity = vmath.vector3(self.startvel.x, self.startvel.y, self.startvel.z)
end

local function angletile(self, t)
	if t == 37 then
		if self.velocity.x ~= 0 then
			self.velocity.y = self.velocity.x
			self.velocity.x = 0
		elseif self.velocity.y ~= 0 then
			self.velocity.x = self.velocity.y
			self.velocity.y = 0
		end	
	elseif t == 38 then
		if self.velocity.x ~= 0 then
			self.velocity.y = -self.velocity.x
			self.velocity.x = 0
		elseif self.velocity.y ~= 0 then
			self.velocity.x = -self.velocity.y
			self.velocity.y = 0
		end	
	end
end

local function goal(self)
	msg.post("main:/sound#pop", "play_sound", {gain = 1.0})			
	data.numballs = data.numballs - 1
	self.goal = true
end

local function checktiles(self)
	local p = go.get_position()
	
	if math.fmod(p.x + TILE_HALF, TILE_SIZE) ~= 0 or math.fmod(p.y + TILE_HALF, TILE_SIZE) ~= 0 then return end
	
	p.x = (p.x + TILE_HALF) / TILE_SIZE
	p.y = (p.y + TILE_HALF) / TILE_SIZE	
	local t = tilemap.get_tile(self.levelurl, "level", p.x, p.y)	
	if t == 0 then t = tilemap.get_tile(self.levelurl, "player", p.x, p.y) end
	if t == 0 then t = tilemap.get_tile(self.levelurl, "background", p.x, p.y) end
	
	if t == 0 or t == 1 then
		msg.post("common/ball", "reset", {})
		data.state = data.STATE_STOPPED
		msg.post(string.format("level%d:/map#script", data.level), "restore", {})		
		msg.post("main:/sound#fail", "play_sound", {gain = 1.0})			
	elseif t == 18 then
		goal(self)	
	elseif t == 33 then
		self.velocity = vmath.vector3(-1,0,0)
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	elseif t == 34 then
		self.velocity = vmath.vector3(1,0,0)
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	elseif t == 35 then
		self.velocity = vmath.vector3(0,1,0)
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	elseif t == 36 then
		self.velocity = vmath.vector3(0,-1,0)
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	elseif t == 37 or t == 38 then
		angletile(self, t)
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})						
	elseif t == 39 and data.teleport.x ~= 0 then
		setposition(data.teleport)
		msg.post("main:/sound#teleport", "play_sound", {gain = 1.0})			
	elseif t == 41 then
		angletile(self, 37)
		msg.post("main:/sound#switch", "play_sound", {gain = 0.5})
		tilemap.set_tile(self.levelurl, "player", p.x, p.y, 42)						
	elseif t == 42 then
		angletile(self, 38)
		msg.post("main:/sound#switch", "play_sound", {gain = 0.5})						
		tilemap.set_tile(self.levelurl, "player", p.x, p.y, 41)
	elseif t == 57 then		
		local p = go.get_position()				
		go.set_position(vmath.vector3(7 * TILE_SIZE, p.y, p.z))
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	elseif t == 58 then						
		local p = go.get_position()				
		go.set_position(vmath.vector3(0, p.y, p.z))
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	elseif t == 59 then						
		local p = go.get_position()				
		go.set_position(vmath.vector3(p.x, 5 * TILE_SIZE, p.z))
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	elseif t == 60 then						
		local p = go.get_position()				
		go.set_position(vmath.vector3(p.x, 12 * TILE_SIZE, p.z))
		msg.post("main:/sound#swipe", "play_sound", {gain = 1.0})			
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING and not self.goal then
		move(self)
		checktiles(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		setposition(message.position)
	elseif message_id == hash("velocity") then
		self.velocity = message.velocity
	elseif message_id == hash("reset") then
		reset(self)
	end
end

function on_input(self, action_id, action)
end
