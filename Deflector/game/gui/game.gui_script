local data = require ("main.data")

local function disablenode (self, node)
 	gui.set_enabled(node, false)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.levelurl = string.format("level%d:/map#tilemap", data.level)	
	self.select = vmath.vector3(0, 0, 0)
 	gui.set_text(gui.get_node("message_top"), string.format("LEVEL %d", data.level))
 	gui.set_enabled(gui.get_node("fade"), true)
	gui.set_color(gui.get_node("fade"), vmath.vector4(0,0,0,1))
	gui.animate(gui.get_node("fade"), gui.PROP_COLOR, vmath.vector4(0,0,0,0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
 	 	data.state = data.STATE_GETREADY 	
end

function update(self, dt)
	if data.state == data.STATE_STOPPED then
		gui.play_flipbook(gui.get_node("play"), "play")
		gui.set_color(gui.get_node("reset"), vmath.vector4(1,1,1,1))
		gui.set_color(gui.get_node("quit"), vmath.vector4(1,1,1,1))
	else
		gui.play_flipbook(gui.get_node("play"), "stop")
		gui.set_color(gui.get_node("reset"), vmath.vector4(1,1,1,0.25))
		gui.set_color(gui.get_node("quit"), vmath.vector4(1,1,1,0.25))
	end
end

local function play()
	data.state = data.STATE_PLAYING
	msg.post(string.format("level%d:/map#script", data.level), "snapshot", {})
	msg.post("main:/sound#play", "play_sound", {gain = 1.0})			
end

local function checkstop(self, sx, sy)
	if gui.pick_node(gui.get_node("play"), sx, sy) then
		data.state = data.STATE_STOPPED
		msg.post("ball", "reset", {})
		msg.post(string.format("level%d:/map#script", data.level), "restore", {})				
		msg.post("main:/sound#switch", "play_sound", {gain = 1.0})			
	end
end

local function processclick(self, sx, sy)
	local x = math.floor(sx / 64) + 1
	local y = math.floor(sy / 64) + 1
	
	if (y >= 1 and y <= 3) or (y >= 6 and y <= 13) then
		if self.select.x == x and self.select.y == y then
			tilemap.set_tile(self.levelurl, "cursor", x, y, 0)
			self.select = vmath.vector3(0, 0, 0)
			msg.post("main:/sound#beep1", "play_sound", {gain = 1.0})						
		else
			if self.select.x ~= 0 then
				tilemap.set_tile(self.levelurl, "cursor", self.select.x, self.select.y, 0)
				local l = tilemap.get_tile(self.levelurl, "level", x, y)
				local b = tilemap.get_tile(self.levelurl, "background", x, y)
				if l ~= 0 or b <= 1 or b == 4 then
					self.select = vmath.vector3(0, 0, 0)
					msg.post("main:/sound#fail", "play_sound", {gain = 1.0})						
					return
				end
				
				local s = tilemap.get_tile(self.levelurl, "player", self.select.x, self.select.y)
				local d = tilemap.get_tile(self.levelurl, "player", x, y)
				tilemap.set_tile(self.levelurl, "player", self.select.x, self.select.y, d)
				tilemap.set_tile(self.levelurl, "player", x, y, s)
				self.select = vmath.vector3(0, 0, 0)
				msg.post("main:/sound#beep1", "play_sound", {gain = 1.0})										
			elseif tilemap.get_tile(self.levelurl, "player", x, y) ~= 0 then
				tilemap.set_tile(self.levelurl, "cursor", x, y, 32)
				self.select = vmath.vector3(x, y, 0)
				msg.post("main:/sound#beep2", "play_sound", {gain = 1.0})						
			else
				self.select = vmath.vector3(0, 0, 0)
			end
		end
	else
		if gui.pick_node(gui.get_node("play"), sx, sy) then
			play()
		elseif gui.pick_node(gui.get_node("reset"), sx, sy) then
			data.state = data.STATE_STOPPED
			msg.post("ball", "reset", {})
			msg.post(string.format("level%d:/map#script", data.level), "reset", {})
			msg.post("main:/sound#clunk", "play_sound", {gain = 1.0})						
		elseif gui.pick_node(gui.get_node("quit"), sx, sy) then
			data.savegamefile(self)
			msg.post("main:/handler", "show_menu")
		end
	end
end

local function start(self)
 	gui.animate(gui.get_node("message"), gui.PROP_POSITION, vmath.vector3(224, -160, 0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
  	data.state = data.STATE_STOPPED
  	msg.post("main:/sound#play", "play_sound", {gain = 1.0})			  	
end
 	
local function levelclear(self)
	data.state = data.STATE_LEVELCLEAR
 	gui.set_enabled(gui.get_node("buttons"), false)
	gui.set_text(gui.get_node("message_text"), "LEVEL CLEAR")
	gui.set_text(gui.get_node("message_top"), "WELL DONE")
	gui.set_text(gui.get_node("message_low"), "NEXT LEVEL")

  	gui.set_enabled(gui.get_node("message"), true)
 	gui.animate(gui.get_node("message"), gui.PROP_POSITION, vmath.vector3(224, 160, 0), gui.EASING_INOUTQUAD, 0.25)
end

local function nextlevel(self)
	data.level = data.level + 1
	if data.level >= 15 then data.level = 1 end
	msg.post("game:/loader", "new_level", {})
end
 	
function on_input(self, action_id, action)
	if action_id == hash("clicktap") and action.pressed then
		if data.state == data.STATE_STOPPED then
			processclick(self, action.x, action.y)
		elseif data.state == data.STATE_PLAYING then
			checkstop(self, action.x, action.y)
		elseif data.state == data.STATE_GETREADY then
			start(self)
		elseif data.state == data.STATE_LEVELCLEAR then
			nextlevel(self)
		end
	elseif action_id == hash("skip") and action.pressed then
		nextlevel(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("clear") then
		levelclear(self)
	end
end