local data = require ("main.data")
local itm = require ("game/items.items")

function init(self)
	self.spawned_objects = {}
	self.levelurl = string.format("level%d:/level#tilemap", data.level)
	self.exitpos = vmath.vector3(0,0,0)
		
	spawnstairs(self)
	spawnchests(self)
	spawnboxes(self)
	--spawnanvil(self)
end

function findfreearea(self)
	sx, sy, w, h = tilemap.get_bounds(self.levelurl)
	local c = false
	local x, y
	local n = 1
	
	while c == false do
		x = math.random(sx + 1, sx + w - 2)
		y = math.random(sy + 1, sy + h - 2)
				
		if data.istilespawnable(self, x, y) and
			data.istilespawnable(self, x+1, y) and
			data.istilespawnable(self, x-1, y) and
			data.istilespawnable(self, x, y+1) and
			data.istilespawnable(self, x, y-1) then c = true
		end
		
		n = n + 1
		
		if n > 500 then
			print("tile area not found")		
			c = true
			x = 0
			y = 0
		end
	end

	return vmath.vector3(x, y, 0)
end

function spawnchests(self)
	if math.random(2) == 1 then
		pos = data.findfreetile(self)
		tilemap.set_tile(self.levelurl, "items", pos.x, pos.y, 557)
	end

	local total = 5 + math.random(3)

	while total > 0 do
		local pos = data.findfreetile(self)
		tilemap.set_tile(self.levelurl, "items", pos.x, pos.y, 553)
		total = total - 1
	end
end

function spawnboxes(self)
	local total = 5 + math.floor(data.depth / 4)
	
	while total > 0 do
		local pos = data.findfreetile(self)
		tilemap.set_tile(self.levelurl, "items", pos.x, pos.y, 558)
		total = total - 1
	end
end

function spawnanvil(self)
	if math.random(5) == 1 then
		local pos = findfreearea(self)
		tilemap.set_tile(self.levelurl, "items", pos.x, pos.y, 556)
	end
end
	
function distance (p1, p2)
  local dx = p1.x - p2.x
  local dy = p1.y - p2.y
  return math.sqrt (dx * dx + dy * dy)
end
	
function spawnstairs(self)
	local pos = findfreearea(self)
	tilemap.set_tile(self.levelurl, "items", pos.x, pos.y, 266)
	tilemap.set_tile(self.levelurl, "taken", pos.x, pos.y, 1)
	tilemap.set_tile(self.levelurl, "taken", pos.x+1, pos.y, 1)
	tilemap.set_tile(self.levelurl, "fog", pos.x+1, pos.y, 0)
	
	local entrypos = vmath.vector3(pos.x, pos.y, pos.z)
	
	pos.x = ((pos.x + 1) * 16) - 8
	pos.y = (pos.y * 16) - 8
	pos.z = 1
	msg.post("player", "set_position", {pos = pos})

	local d = 0
	while d < 15 do
		self.exitpos = findfreearea(self)
		d = distance(entrypos, self.exitpos)
	end
		
	tilemap.set_tile(self.levelurl, "items", self.exitpos.x, self.exitpos.y, 267)
	tilemap.set_tile(self.levelurl, "taken", self.exitpos.x, self.exitpos.y, 1)	
	
	if data.depth >= 26 then
		tilemap.set_tile(self.levelurl, "items", self.exitpos.x, self.exitpos.y, 268)
		go.set_position(vmath.vector3((self.exitpos.x * 16) - 8, (self.exitpos.y * 16) - 8, 0))	
	end
end

function dropitem(self, pos, num)
	pos.z = 0.5
	if num < 1 then num = math.random(2, 64) end 
	additem(self, num, pos)
end

function additem(self, type, pos)
	local item = factory.create("#item_factory", pos, nil, {item_num = type})
	table.insert(self.spawned_objects, item)
end

function deleteitem(self, id)
	for k, v in ipairs(self.spawned_objects) do	
		if (v == id) then
			table.remove(self.spawned_objects,k)
			return
		end
	end
	
	go.delete(id)
end

function deleteallitems(self)
	for k, v in pairs(self.spawned_objects) do
		table.remove(self.spawned_objects, k)
		go.delete(v)
	end	
end

local function getnewitem(min, max)
	local i = math.random(min, max)
	
	while data.itemininv(i) do
		i = math.random(min, max)
	end

	return i
end

local function crossofitems(self, pos, min, max)
	local p = vmath.vector3(0, 0, 0)
	local i = min
	
	p.x = (pos.x * 16) - 8
	p.y = ((pos.y - 1) * 16) - 8
		
	dropitem(self, p, getnewitem(min, max))
	p.x = (pos.x * 16) - 8
	p.y = ((pos.y + 1) * 16) - 8
	dropitem(self, p, getnewitem(min, max))
	p.x = ((pos.x + 1) * 16) - 8
	p.y = (pos.y * 16) - 8
	dropitem(self, p, getnewitem(min, max))
	p.x = ((pos.x - 1) * 16) - 8
	p.y = (pos.y * 16) - 8
	dropitem(self, p, getnewitem(min, max))
end

local function setspecialroom(self, pos)	
	crossofitems(self, pos, itm.getnum("SCROLL OF REVELATION"), itm.getnum("AMULET OF EXPERIENCE"))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("delete_item") then
		deleteitem (self, message.id)
	elseif message_id == hash("drop_item") then
		dropitem(self, message.pos, message.num)
	elseif message_id == hash("open_exit") then
		tilemap.set_tile(self.levelurl, "items", self.exitpos.x, self.exitpos.y, 267)
		particlefx.play("#particlefx")		
	elseif message_id == hash("level_clear") then
		msg.post("view#osd", "update_status", {status = "Level clear!"})
		msg.post("main:/sound#magic2", "play_sound", {gain = data.sfxvol})									
	elseif message_id == hash("special") then
		setspecialroom(self, message.pos)
	end
end

