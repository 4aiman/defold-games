local data = require ("main.data")

function init(self)
	self.spawned_objects = {}
	self.levelurl = string.format("level%d:/level#tilemap", data.level)
	
	local max = 12 + (data.depth / 4)
	if max > 32 then max = 32 end
	local total = math.random(8, 12 + max)
		
	while total > 0 do		
		local pos = data.findfreetile(self)
		pos = vmath.vector3((pos.x*16) - 8, (pos.y*16) - 8, 0.25)
		
		local r = math.random(1, 2)
		if r == 1 then addbombtrap(self, 1, pos)
		else addgootrap(self, 1, pos)
		end
		
		data.settile(self, pos.x, pos.y, "taken", 1)
			
		total = total - 1
	end

	if math.random(3) == 2 then
		local pos = data.findcorridortile(self)
		pos = vmath.vector3((pos.x*16) - 8, (pos.y*16) - 8, 0.25)
		addfiretrap(self, 1, pos)
	end
end

function addbombtrap(self, type, pos)
	local trap = factory.create("#trap_bomb_factory", pos, nil, {trap_num = type})
	table.insert(self.spawned_objects, trap)
end

function addfiretrap(self, type, pos)
	local trap = factory.create("#trap_fire_factory", pos, nil, {trap_num = type})
	table.insert(self.spawned_objects, trap)
end

function addgootrap(self, type, pos)
	local trap = factory.create("#trap_goo_factory", pos, nil, {trap_num = type})
	table.insert(self.spawned_objects, trap)
end

function deletetrap(self, id)
	for k, v in ipairs(self.spawned_objects) do	
		if (v == id) then
			table.remove(self.spawned_objects,k)
			return
		end
	end

	go.delete(id)
end

function deletealltraps(self)
	for k, v in pairs(self.spawned_objects) do
		table.remove(self.spawned_objects, k)
		go.delete(v)
	end	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("delete_trap") then
		deletetrap (self, sender)
	end
end

