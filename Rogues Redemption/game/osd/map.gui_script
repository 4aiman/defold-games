local data = require ("main.data")
local MAP_SCALE = 8
	
function init (self)
	self.statusfade = 1
	self.mapnode = nil
	self.levelurl = string.format("level%d:/level#tilemap", data.level)
	self.visible = false
	
	gui.set_text(gui.get_node("class"), data.classnames[data.class])
	gui.set_color(gui.get_node("maposd"), vmath.vector4(1,1,1,0))
 	gui.set_enabled(gui.get_node("maposd"), false)
end

function generate(self)
   	local sx, sy, w, h = tilemap.get_bounds(self.levelurl)
	local pixels = ""
   	
	local solid = string.char(0x00) .. string.char(0x00) .. string.char(0x00) .. string.char(0x33)
	local player = string.char(0x66) .. string.char(0x00) .. string.char(0x00) .. string.char(0xaa)
	local door = string.char(0x00) .. string.char(0x00) .. string.char(0x00) .. string.char(0x11)
	local stairs = string.char(0x00) .. string.char(0x66) .. string.char(0x00) .. string.char(0xaa)
	local floor = string.char(0x00) .. string.char(0x00) .. string.char(0x00) .. string.char(0x00)

	pos.x = math.floor(data.playerpos.x / 16) + 1
	pos.y = math.floor(data.playerpos.y / 16) + 1
	
	for y = sy + h - 1, sy, -1 do
		for x = sx, sx + w - 1 do
			local tile = tilemap.get_tile(self.levelurl, "world", x, y)
			local fog = tilemap.get_tile(self.levelurl, "fog", x, y)
			local item = tilemap.get_tile(self.levelurl, "items", x, y)
						
			if x == pos.x and y == pos.y then
				pixels = pixels .. player
			elseif fog == 0 and tile >= 289 then
				pixels = pixels .. solid
			elseif fog == 0 and tile >= 280 then
				pixels = pixels .. door
			elseif fog == 0 and (item == 267 or item == 268) then
				pixels = pixels .. stairs
			else
				pixels = pixels .. floor
			end
		end
	end

	if gui.new_texture("map", w, h, "rgba", pixels) then
		mapnode = gui.new_box_node(vmath.vector3(224, 400, 0), vmath.vector3(w, h, 0))
		gui.set_scale(mapnode, vmath.vector3(MAP_SCALE, MAP_SCALE, 0))
		gui.set_texture(mapnode, "map")
		gui.set_pivot(mapnode, gui.PIVOT_CENTER)
		gui.set_color(mapnode, vmath.vector4(1, 1, 1, 0))
		gui.set_adjust_mode(mapnode, gui.ADJUST_STRETCH)
	end
end

local function disablenode (self, node)
 	gui.set_enabled(node, false)
end

local function deletemap(self, node)
	self.visible = false
	gui.delete_texture("map")
end

function toggle(self)
	if data.state ~= data.STATE_MAP then
		if self.visible then return end
		self.visible = true
		generate(self)
		data.state = data.STATE_MAP 
		gui.animate(mapnode, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_INOUTQUAD, 0.25)
		gui.set_text(gui.get_node("level"), string.format("Depth %d", data.depth))
	 	gui.set_enabled(gui.get_node("maposd"), true)	
		gui.animate(gui.get_node("maposd"), gui.PROP_COLOR, vmath.vector4(0.8, 0.8, 0.7, 1), gui.EASING_INOUTQUAD, 0.25)
	else
		data.state = data.STATE_INGAME
		gui.animate(mapnode, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_INOUTQUAD, 0.25, 0.0, deletemap)
		gui.animate(gui.get_node("maposd"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("toggle") then
		toggle(self)
	end
end




