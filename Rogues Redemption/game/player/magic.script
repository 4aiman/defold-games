local data = require ("main.data")
local itm = require ("game/items.items")
local enm = require("game/enemies.enemy")

local VAMPIRE_COST = 10
local VAMPIRE_HIT = 10

function castspell(self, x, y, fac, cost)
	local v = vmath.vector3(x, y, 1)
	v = data.screentoworld(self,v)
	v = data.snaptotile(self, v)

	local d = data.playerpos - v
	local len = math.sqrt((d.x * d.x) + (d.y * d.y))
	d.x = (d.x / len)
	d.y = (d.y / len)

	local s = vmath.vector3(data.playerpos.x, data.playerpos.y, data.playerpos.z)

	if d.x > 0.5 then s.x = s.x - 2 
	elseif d.x < -0.5 then s.x = s.x + 2 
	end
	if d.y > 0.5 then s.y = s.y - 2
	elseif d.y < -0.5 then s.y = s.y + 2 
	end
	
	if data.class == data.CLASS_WIZARD then cost = cost / 1.5 end
	
	local e = enm.enemyontile(self, v)
	
	if e ~= nil then
		if enm.getvisible(e) then
			if data.mana >= cost then
				factory.create(fac, s, nil, {targetx = v.x, targety = v.y})
				data.mana = data.mana - cost
				data.spellscast = data.spellscast + 1
				turntaken(self)
				return true
			else
				msg.post("view#osd", "update_status", {status = "Not enough mana", color = vmath.vector4(1,0.5,0,1)})
				msg.post("main:/sound#alarm", "play_sound", {gain = data.sfxvol})											
			end
		end
	end
	
	return false
end

function vampirespell(self, x, y)
	local v = vmath.vector3(x, y, 1)
	v = data.screentoworld(self,v)
	v = data.snaptotile(self, v)
	e = enm.enemyontile(self, v)
	
	if e ~= nil then
		if enm.getvisible(e) then
			if data.mana >= VAMPIRE_COST then
				msg.post(e, "vampire", {damage = VAMPIRE_HIT})			
				data.health = data.health + VAMPIRE_HIT
				data.mana = data.mana - VAMPIRE_COST
				data.spellscast = data.spellscast + 1
				turntaken(self)
				return true
			else
				msg.post("view#osd", "update_status", {status = "Not enough mana", color = vmath.vector4(1,0.5,0,1)})
				msg.post("main:/sound#alarm", "play_sound", {gain = data.sfxvol})										
			end
		end	
	end
	
	return false	
end

function usescroll(self, item)
	if itm.getname(item) == "SCROLL OF REVELATION" then
		revealmap(self)
		msg.post("main:/sound#magic2", "play_sound", {gain = data.sfxvol})							
		msg.post("view#osd", "update_status", {status = "The map is revealed to you"})
		msg.post("view#osd_map", "toggle", {flag = true})		
	elseif itm.getname(item) == "SCROLL OF HEALTH" then
		data.health = data.health + 50
		data.hunger = data.hunger + 25
		self.poison = 0
		self.onfire = 0
		particlefx.play("#shower")
		msg.post("main:/sound#magic", "play_sound", {gain = data.sfxvol})							
		msg.post("view#osd", "update_status", {status = "50 points of health restored"})
	elseif itm.getname(item) == "SCROLL OF DISPLACEMENT" then
		self.target = data.findfreetile(self)
		self.target.x = (self.target.x * 16) - 8
		self.target.y = (self.target.y * 16) - 8
		go.set_position(self.target)
		particlefx.play("#shower")
		msg.post("main:/sound#magic", "play_sound", {gain = data.sfxvol})							
		msg.post("view#osd", "update_status", {status = "You find yourself at new location"})
	elseif itm.getname(item) == "SCROLL OF INFERNO" then
		factory.create("#infernofactory", data.playerpos, nil, {})
	elseif itm.getname(item) == "SCROLL OF DEVASTATION" then
		factory.create("#devastationfactory", data.playerpos, nil, {})
	elseif itm.getname(item) == "SCROLL OF FROST" then
		factory.create("#frostfactory", data.playerpos, nil, {})
		self.onfire = 0
	elseif itm.getname(item) == "SCROLL OF INVISIBILITY" then
		sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 0.5))
		particlefx.play("#shower")			
		msg.post("view#osd", "update_status", {status = "You become invisible"})
		msg.post("main:/sound#magic", "play_sound", {gain = data.sfxvol})							
		data.invisible = 12
	elseif itm.getname(item) == "SCROLL OF SWITCHING" then
		local t = 100 - data.health
		if data.mana < t then t = data.mana end
		data.health = data.health + t
		data.mana = data.mana - t
		particlefx.play("#shower")
		msg.post("main:/sound#magic", "play_sound", {gain = data.sfxvol})							
	end
	
	data.scrollsread = data.scrollsread + 1
end

function revealmap(self)
	sx, sy, w, h = tilemap.get_bounds(self.levelurl)
					
	for y = 1, h-1 do
		for x = 1, w-1 do
			tilemap.set_tile(self.levelurl, "fog", x, y, 0)	
		end
	end
end