local data = require ("main.data")
local enm = require("game/enemies.enemy")
local itm = require ("game/items.items")

local MAGICMISSILE_COST = 10
local FIREBALL_COST = 20
local FREEZE_COST = 20
local FIRE_DAMAGE = 5
local HUNGER_FULL = 100

function init(self)
	msg.post(".", "acquire_input_focus")
	self.target = vmath.vector3(0,0,1)
	self.levelurl = string.format("level%d:/level#tilemap", data.level)
	self.pickupid = 0
	self.doorpos = vmath.vector3(0,0,0)
	self.footstep = false
	self.killedby = 0
	self.viewslot = 1
	self.pickupwait = 0
	self.poison = 0
	self.onfire = 0
	self.extrapower = 0
	self.extradefence = 0
	self.stuck = 0
	self.stuckpos = vmath.vector3(0,0,0)

	msg.post("view#osd", "fadein", {})
	
	setanimation(self)

	if data.newgame then newplayer(self) end
end

function newplayer (self)
	data.clearinv(self)
	
	data.inv[data.INV_SLOT_RIGHTHAND] = itm.getnum("DAGGER")
	data.inv[data.INV_SLOT_LEFTHAND] = itm.getnum("NOTHING")

	data.inv[1] = math.random(itm.getnum("SCROLL OF REVELATION"), itm.getnum("SCROLL OF SWITCHING"))
	data.inv[2] = math.random(itm.getnum("HEALTH POTION"), itm.getnum("PROTECTION SOLUTION"))
	data.inv[3] = math.random(itm.getnum("BREAD"), itm.getnum("RADISHES"))
	
	data.playerpos = vmath.vector3(0,0,0)
	data.turn = 0
	data.enemyturn = 0
	data.state = data.STATE_INGAME
	data.health = 100
	data.mana = 100
	data.plevel = 1
	data.xp = 0
	data.invisible = 0
	data.gold = 0
	data.newgame = false
	data.hunger = 100
	data.sneak = 64
	data.turnstaken = 0
	data.fightswon = 0
	data.scrollsread = 0
	data.spellscast = 0
	data.lockspicked = 0
	data.doorsunlocked = 0
	data.chestsopened = 0
	data.chestsunlocked = 0
	data.time = 0 
	
	if data.class == data.CLASS_WIZARD then
		data.inv[data.INV_SLOT_RIGHTHAND] = itm.getnum("WAND OF MAGIC MISSILE") 
		data.inv[data.INV_SLOT_AMULET] = itm.getnum("AMULET OF MAGIC") 
		data.inv[4] = itm.getnum("DAGGER")
	elseif data.class == data.CLASS_WARRIOR then
		data.inv[data.INV_SLOT_RIGHTHAND] = itm.getnum("WARRIOR'S SWORD")
		data.inv[data.INV_SLOT_AMULET] = itm.getnum("AMULET OF POWER")
		data.inv[data.INV_SLOT_RING] = itm.getnum("RING OF PROTECTION")
	elseif data.class == data.CLASS_ROGUE then
		data.inv[4] = itm.getnum("LOCK PICK")
	end

	msg.post("view#osd", "update_status", {status = "Welcome to ROGUE'S REDEMPTION"})
end

function setanimation(self)
	if data.class == 2 then	msg.post("#sprite", "play_animation", {id = hash("wizard")})
	elseif data.class == 3 then	msg.post("#sprite", "play_animation", {id = hash("warrior")})
	else msg.post("#sprite", "play_animation", {id = hash("rogue")})
	end
end

function update(self, dt)
	updateplayerstatus(self)
	checkplayertile(self)
	updatecolour(self)
	updatetraps(self)
	
	data.time = data.time + dt
	
	if data.turn == 2 then updateturn(self) end

	local pos = go.get_position()
				
	if pos.x < self.target.x then
		pos.x = pos.x + 1
		sprite.set_hflip("#sprite", false)
	elseif pos.x > self.target.x then
		pos.x = pos.x - 1
		sprite.set_hflip("#sprite", true)
	end
	
	if pos.y < self.target.y then pos.y = pos.y + 1
	elseif pos.y > self.target.y then pos.y = pos.y - 1	end
	
	doors(self, pos)

	go.set_position(pos)
	data.playerpos = pos

	msg.post("view#view", "look_at", {position = pos})
end

function updatetraps(self)
	if data.turn == 8 and self.stuck > 0 then
		self.target.x = self.stuckpos.x
		self.target.y = self.stuckpos.y
	end
end

function updateplayerstatus(self)
	if data.health <= 0 and data.turn >= 0 then
		data.health = 0
		data.turn = -1
		--msg.post("view#osd", "update_status", {status = string.format("Killed by %s %s", enm.getenemynamedeterminer(self.killedby), enm.getenemyname(self.killedby))})
		msg.post("main:/sound#music", "stop_sound", {})	    	
		msg.post("main:/sound#dead", "play_sound", {gain = data.sfxvol})
		msg.post("view#osd", "dead", {})		
	elseif data.health > 100 then
		data.health = 100
	end
	
	if data.mana > 100 then	data.mana = 100	end
	
	if self.pickupwait > 0 then self.pickupwait = self.pickupwait - 1 end
	
	if data.xp >= 100 then
		data.xp = data.xp - 100
		data.plevel = data.plevel + 1
		msg.post("view#osd", "update_status", {status = "You gained a level!", color = vmath.vector4(0,1,0,1)})
		msg.post("main:/sound#magic2", "play_sound", {gain = data.sfxvol})							
	end

	if data.hunger > 100 then data.hunger = 100 end
	
	calcsneak(self)
end

function updatecolour(self)
	local col = vmath.vector4(1, 1, 1, 1)

	if self.poison > 0 then
		col.x = 0.4
		col.z = 0.4
	end
	
	if data.invisible > 0 then col.w = 0.3 end		
	sprite.set_constant("#sprite", "tint", col)
end

function updateturn(self)
	if self.poison > 0 then
		self.poison = self.poison - 1
		data.health = data.health - 1
		if self.poison <= 0 then 
			msg.post("view#osd", "update_status", {status = "The POISON wears off"}) 
			particlefx.stop("#poison")
		end
	end
	
	if data.invisible > 0 then
		data.invisible = data.invisible - 1
		if data.invisible == 0 then
			msg.post("view#osd", "update_status", {status = "The invisibility wears off"})
		end
	end	
	
	if self.extrapower > 0 then
		self.extrapower = self.extrapower - 1
		if self.extrapower == 0 then
			msg.post("view#osd", "update_status", {status = "The STRENGTH SOLUTION wears off"})
		end
	end
	
	if self.extradefence > 0 then
		self.extradefence = self.extradefence - 1
		if self.extradefence == 0 then
			msg.post("view#osd", "update_status", {status = "The PROTECTION SOLUTION wears off"})
		end
	end
	
	if self.stuck > 0 then
		self.stuck = self.stuck - 1
		if self.stuck == 0 then
			msg.post("view#osd", "update_status", {status = "You manage to free yourself from the goo"})
		end		
	end
	
	if self.onfire > 0 then
		data.health = data.health - FIRE_DAMAGE
		self.onfire = self.onfire - 1
		if self.onfire <= 0 then particlefx.stop("#onfire") end
	end
	
	if data.class == data.CLASS_WIZARD then	data.mana = data.mana + 0.3
	else data.mana = data.mana + 0.1
	end
	
	if itm.getname(data.inv[data.INV_SLOT_RING]) == "RING OF MANA" then
		data.mana = data.mana + 0.1
	end
		
	if data.hunger > 0 then data.hunger = data.hunger - 0.25 end
	if data.hunger == 15 then
		msg.post("view#osd", "update_status", {status = "You are getting hungry", color = vmath.vector4(1,0.5,0,1)})
		msg.post("main:/sound#alarm", "play_sound", {gain = data.sfxvol})							
	elseif data.hunger <= 5 then
		data.health = data.health - 1
		if data.hunger == 5 or (data.hunger <= 5 and data.health < 25) then
			msg.post("view#osd", "update_status", {status = "You are STARVING", color = vmath.vector4(1,0,0,1)})
			msg.post("main:/sound#alarm", "play_sound", {gain = data.sfxvol})							
		end
	end
end

function checkplayertile(self)
	local pos = go.get_position()
	local tw = data.gettile(self, pos.x, pos.y, "world")
	local ti = data.gettile(self, pos.x, pos.y, "items")
	
	if ti == 267 and data.turn == 16 then
		data.turn = -1
		msg.post("view#osd", "fadeout", {})
	end
end

function doors(self, pos)
	local tile = data.gettile(self, pos.x, pos.y, "world")
	
	if tile == 287 or tile == 288 then
		self.doorpos.x = pos.x
		self.doorpos.y = pos.y
		self.doorpos.z = tile 
		data.settile(self, pos.x, pos.y, "world", tile-24)
		msg.post("main:/sound#dooropen", "play_sound", {gain = data.sfxvol})					
	elseif tile < 263 and self.doorpos.z ~= 0 then
		data.settile(self, self.doorpos.x, self.doorpos.y, "world", self.doorpos.z)
		self.doorpos.z = 0
		msg.post("main:/sound#doorclose", "play_sound", {gain = data.sfxvol})					
	end
end

function calcdamage(self, damage)
	local d = damage
	
	local t = itm.getdefence(data.inv[data.INV_SLOT_LEFTHAND]) / 100
	d = d - (t * damage)	
	t = itm.getdefence(data.inv[data.INV_SLOT_ARMOUR]) / 100
	d = d - (t * damage)
	t = itm.getdefence(data.inv[data.INV_SLOT_HELMET]) / 100
	d = d - (t * damage)
	t = itm.getdefence(data.inv[data.INV_SLOT_GLOVES]) / 100
	d = d - (t * damage)
	t = itm.getdefence(data.inv[data.INV_SLOT_BOOTS]) / 100
	d = d - (t * damage)

	if itm.getname(data.inv[data.INV_SLOT_RING]) == "RING OF PROTECTION" then d = d - (damage * 0.1) end
	if itm.getname(data.inv[data.INV_SLOT_AMULET]) == "AMULET OF PROTECTION" then	d = d - (damage * 0.1) end
	if self.extradefence > 0 then d = d * 0.5 end
			
	return d				
end

function hitdamage (self, damage)
	particlefx.play("#hit")
	msg.post("main:/sound#punch", "play_sound", {gain = data.sfxvol})				
	data.health = data.health - calcdamage(self, damage)	
end

function calcpower(self)
	local b = itm.getattack(data.inv[data.INV_SLOT_RIGHTHAND])

	local p = b
		
	if self.extrapower > 0 then	p = p + (b * 1) end
	if itm.getname(data.inv[data.INV_SLOT_RING]) == "RING OF POWER" then p = p + (b * 0.1) end
	if itm.getname(data.inv[data.INV_SLOT_AMULET]) == "AMULET OF POWER" then p = p + (b * 0.1) end

	p = p + (b * ((data.plevel - 1) / 60))
		
	return p	
end

function calcxp(self, add)
	if itm.getname(data.inv[data.INV_SLOT_AMULET]) == "AMULET OF EXPERIENCE" then add = (add * 1.2) end
	if self.stuck ~= 0 then add = add * 1.5 end
	return add
end

function calcsneak(self)	
	data.sneak = 64 

	if data.inv[data.INV_SLOT_BOOTS] == itm.getnum("BOOTS OF SNEAKING") then
		data.sneak = data.sneak - 16
	end
	
	if data.class == data.CLASS_ROGUE then
		data.sneak = data.sneak - 16
	end
end

function turntaken (self)
	msg.post("view#turns", "player_moved", {})
	data.turnstaken = data.turnstaken + 1
end

function trytile(self, x ,y)
	local valid = false

	item = data.gettile (self, x, y, "items")

	if item == 553 then openchest(self, x, y, 0) 
	elseif item == 559 then openchest(self, x, y, 1)
	elseif item == 555 then unlockdoor(self, x, y)
	elseif item == 556 then useanvil(self, x, y)
	elseif item == 557 then unlockchest(self, x, y)
	elseif item == 558 then openbox(self, x, y)
	end
	
	if data.gettile (self, x, y, "world") < 289 and item < 289 then valid = true end
	
	return valid
end

function move(self, mx, my)
	local c = enm.enemyontile(self, vmath.vector3(self.target.x + mx, self.target.y + my, 1))

	if c ~= nil then
		if itm.getclass(data.inv[data.INV_SLOT_RIGHTHAND]) == itm.CLASS_RHAND then
			msg.post(c, "hit", {damage = calcpower(self)})			
		else
			msg.post(c, "hit", {damage = itm.getattack(1)})			
		end
		turntaken(self)
	elseif (trytile (self, self.target.x + mx, self.target.y + my)) then
		self.target.x = self.target.x + mx
		self.target.y = self.target.y + my
		if self.footstep then
			msg.post("main:/sound#footsteps", "play_sound", {gain = data.sfxvol})
			self.footstep = false
		else
			msg.post("main:/sound#footsteps2", "play_sound", {gain = data.sfxvol})
			self.footstep = true
		end				
		turntaken(self)
	end
end

local function sendprofiledata(self)
	local att = 100 - ((itm.getattack(data.inv[data.INV_SLOT_RIGHTHAND]) / calcpower(self)) * 99)
	local def = 100 - calcdamage(self, 100)
	local str = string.format("%d%%\n%d%%\n%d\n%d/100\n+%d%%\n+%d%%\n%d/64",
		data.health, data.mana, data.gold, data.hunger, att, def, 64 - data.sneak)

	msg.post("view#osd_profile", "data", {data = str})
	msg.post("view#osd_profile", "toggle", {flag = true})
end

function processclick(self, x, y)
	local r = vmath.vector4(0,0,0,0)

	if data.state == data.STATE_MAP then
		msg.post("view#osd_map", "toggle", {flag = false})
		return
	elseif data.state == data.STATE_EXAMINEITEM then
		processitemclick(self, x, y)
		return
	elseif data.state == data.STATE_INVENTORY then
		msg.post("view#osd_inv", "click", {x = x, y = y})
		return
	elseif data.state == data.STATE_EQUIPPED then
		msg.post("view#osd_equipped", "click", {x = x, y = y})
		return	
	elseif data.state == data.STATE_PROFILE then
		msg.post("view#osd_profile", "toggle", {flag = false})
		return
	elseif data.state == data.STATE_SHOP then
		msg.post("view#osd_shop", "click", {x = x, y = y})
		return
	elseif data.state == data.STATE_GAMEMENU then
		msg.post("view#osd_menu", "click", {x = x, y = y})
		return
	elseif data.state ~= data.STATE_EXAMINEITEM then
		r = vmath.vector4(353,8,424,80)
		if data.ptinrect(x, y, r) then
			msg.post("view#osd_inv", "toggle", {flag = true})
			return
		end
	end
		
	r = vmath.vector4(25,8,95,80)
	if data.ptinrect(x, y, r) then
		self.viewslot = data.INV_SLOT_LEFTHAND
		if data.inv[self.viewslot] > 1 then
			msg.post("view#osd_item", "toggle", {flag = true, item = data.inv[self.viewslot], slot = self.viewslot})
		end
		return
	end

	r = vmath.vector4(105,8,175,80)
	if data.ptinrect(x, y, r) then
		self.viewslot = data.INV_SLOT_RIGHTHAND
		if data.inv[self.viewslot] > 1 then
			msg.post("view#osd_item", "toggle", {flag = true, item = data.inv[self.viewslot], slot = self.viewslot})
		end
		return
	end
		
	r = vmath.vector4(189,8,260,80)
	if data.ptinrect(x, y, r) then
		wait(self)
		return
	end			

	r = vmath.vector4(273,8,344,80)
	if data.ptinrect(x, y, r) then
		msg.post("view#osd_map", "toggle", {flag = true})
		return
	end		

	r = vmath.vector4(269, 720, 340, 800)
	if data.ptinrect(x, y, r) then
		sendprofiledata(self)
		return
	end			

	r = vmath.vector4(353, 720, 424, 800)
	if data.ptinrect(x, y, r) then
		msg.post("view#osd_menu", "toggle", {flag = true})
		return
	end			

	local item = data.inv[data.INV_SLOT_RIGHTHAND]

	if itm.getname(item) == "WAND OF FIRE" then
		if castspell(self, x, y, "#fireballfactory", FIREBALL_COST) then return end
	elseif itm.getname(item) == "WAND OF MAGIC MISSILE" then
		if castspell(self, x, y, "#magicmissilefactory", MAGICMISSILE_COST) then return end
	elseif itm.getname(item) == "WAND OF FROST" then
		if castspell(self, x, y, "#freezefactory", FREEZE_COST) then return end
	elseif itm.getname(item) == "WAND OF LEECHING" then
		if vampirespell(self, x, y) then return end
	end
			
	local v = vmath.vector3(x, y, 0) - vmath.vector3(224,400,0)
	local len = math.sqrt((v.x * v.x) + (v.y * v.y))

	v.x = (v.x / len)
	v.y = (v.y / len)

	if v.x > 0.5 then v.x = 16 elseif v.x < -0.5 then v.x = -16 else v.x = 0 end
	if v.y > 0.5 then v.y = 16 elseif v.y < -0.5 then v.y = -16 else v.y = 0 end

	move(self, v.x, v.y)
end

function processitemclick(self, x, y)
	local xy = {
		23, 105,101,28,
		127,105,206,28,
		231,105,310,28}
	local origin = vmath.vector4(56, 150, 56, 150)
		
	for n = 1, 3*4, 4 do
		local p = origin + vmath.vector4(xy[n], xy[n+3], xy[n+2], xy[n+1])
												
		if data.ptinrect(x, y, p) then
		
			local button = (n/4)+0.75
			
			if button == 1 then
				if itm.isequippable(data.inv[self.viewslot]) then
					local c = itm.getclass(data.inv[self.viewslot])
					if self.viewslot <= data.INV_SIZE then equip(self)
					else unequip(self) end
					msg.post("view#osd_item", "toggle", {flag = false})
					msg.post("view#osd_inv", "hide", {})
					if c == itm.CLASS_RHAND or c == itm.CLASS_LHAND or c == itm.CLASS_SPELL then
						data.state = data.STATE_INGAME
					else
						msg.post("view#osd_equipped", "show", {})
						data.state = data.STATE_EQUIPPED					
					end
				else
					local e = itm.getedible(data.inv[self.viewslot])
					useitem(self)
					msg.post("view#osd_item", "toggle", {flag = false})
					if e == 0 then
						msg.post("view#osd_inv", "toggle", {flag = false})
						data.state = data.STATE_INGAME
					else
						data.state = data.STATE_INVENTORY					
					end
				end
			elseif button == 2 then 
				dropcurrentitem(self)
				msg.post("view#osd_item", "toggle", {flag = false})
				msg.post("view#osd_inv", "hide", {})
				msg.post("view#osd_equipped", "hide", {})
				data.state = data.STATE_INGAME		
			elseif button == 3 then
				msg.post("view#osd_item", "toggle", {flag = false})			
				if self.viewslot >= data.INV_SLOT_LEFTHAND then
					msg.post("view#osd_inv", "hide", {})
					data.state = data.STATE_INGAME		
				elseif self.viewslot >= data.INV_SLOT_HELMET then
					data.state = data.STATE_EQUIPPED
				else
					data.state = data.STATE_INVENTORY
				end				
			end
		end
	end
end				

function processback(self)
	if data.state == data.STATE_INVENTORY then msg.post("view#osd_inv", "toggle", {flag = false})
	elseif data.state == data.STATE_EXAMINEITEM then msg.post("view#osd_item", "toggle", {flag = false})
	else msg.post("@system:", "exit", {code = 0})	
	end
end
	
function wait(self)
	msg.post("view#osd", "update_status", {status = "Skipped a turn"})
	turntaken(self)
end

local function fullyloaded(self)
	msg.post("view#osd", "update_status", {status = "Fully loaded"})
	data.inv[data.INV_SLOT_LEFTHAND] = itm.getnum("KNIGHT'S SHIELD")
	data.inv[data.INV_SLOT_RIGHTHAND] = itm.getnum("WAR AXE")
	data.inv[data.INV_SLOT_HELMET] = itm.getnum("TITANIUM HELMET")
	data.inv[data.INV_SLOT_ARMOUR] = itm.getnum("TITANIUM ARMOUR")
	data.inv[data.INV_SLOT_AMULET] = itm.getnum("AMULET OF POWER")
	data.inv[data.INV_SLOT_RING] = itm.getnum("RING OF POWER")
	data.inv[data.INV_SLOT_GLOVES] = itm.getnum("TITANIUM GLOVES")
	data.inv[data.INV_SLOT_BOOTS] = itm.getnum("TITANIUM BOOTS")

	data.inv[5] = itm.getnum("SILVER KEY")
	data.inv[6] = itm.getnum("GOLD KEY")
	data.gold = 5000
	data.health = 100
	data.mana = 100
	data.plevel = 25
end
	
function on_input(self, action_id, action)
--[[	if action.pressed and action_id == hash("DEBUG") then
		enm.debug()
	elseif action.pressed and action_id == hash("save") then
		fullyloaded(self)
		data.savegamefile(self)
		msg.post("view#osd", "update_status", {status = "Game saved"})
	end--]]

	if data.turn == -2 then
		if action.pressed and action_id == hash("mouse_click") then
			if not data.keep then data.clearsavegame(self) end	
    		msg.post("view", "look_at", { position = vmath.vector3(56, 100, 0) })    	
	    	msg.post("main:/handler", "show_menu")
    		msg.post("main:/sound#music", "stop_sound", {})	    	
    	end
    	return
	elseif data.state == data.STATE_COMPLETED then
		if action_id == hash("mouse_click") then
			msg.post("view#osd_completed", "click", {x = action.x, y = action.y})
		end
		return
	end
	
	if data.turn ~= 0 then
		return
	end

	if action.pressed then			
		if action_id == hash("mouse_click") then
			processclick(self, action.x, action.y)
		end
	
		--[[if action_id == hash("KEY_BACK") then
			processback(self)
		end
		
		if action_id == hash("move_right") then
			data.turn = -1
			msg.post("view#osd", "fadeout", {})
		end--]]
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("hit") then
		self.killedby = message.type
		hitdamage(self, message.damage)
	elseif message_id == hash("pickup_hover") and self.pickupwait == 0 then
		self.pickupid = sender
		pickupitem(self, message.num)
		self.pickupwait = 5
	elseif message_id == hash("picked_up") then
		msg.post(string.format("item_handler", data.level), "delete_item", {id = self.pickupid})
		self.pickup = 0
	elseif message_id == hash("set_position") then
		self.target = message.pos
		go.set_position(message.pos)
	elseif message_id == hash("poison") and self.poison == 0 then
		self.poison = message.poison
		msg.post("view#osd", "update_status", {status = "You have been poisoned", color = vmath.vector4(1,0,0,1)})
		particlefx.play("#poison")
	elseif message_id == hash("increase_xp") then
		data.xp = data.xp + calcxp(self, message.xp)
	elseif message_id == hash("stuck") and self.stuck == 0 then
		self.stuck = 5
		self.stuckpos.x = self.target.x
		self.stuckpos.y = self.target.y
		msg.post("view#osd", "update_status", {status = "You're stuck in some goo"})
	elseif message_id == hash("onfire") then 
		self.onfire = 5
		particlefx.play("#onfire")
	elseif message_id == hash("view") then
		self.viewslot = message.slot
	end
end
