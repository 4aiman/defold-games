local data = require ("main.data")

local function reset(self)
	local sx,sy,w,h = tilemap.get_bounds("level#map")

	for y = sy + 12, h - 20 do
		for x = sx, w do
			tilemap.set_tile("level#map", "main", x, y, 0)
			tilemap.set_tile("level#map", "2", x, y, 0)
		end
	end
	
	for k,v in pairs(self.laser) do
		self.laser[k] = nil
	end
	
	for k,v in pairs(self.platform) do
		go.delete(self.platform[k])
		self.platform[k] = nil
	end

	for k,v in pairs(self.enemy) do
		go.delete(self.enemy[k])
		self.enemy[k] = nil
	end
end

function init(self)
	self.laser = {}
	self.platform = {}
	self.enemy = {}	
	self.time = 0
	reset(self)
	generate(self)
end

local function drawlaser(self, y)
	local sx,sy,w,h = tilemap.get_bounds("level#map")

	for n = sx + 1, sx + w - 2 do
		tilemap.set_tile("level#map", "2", n, y, 26)
	end
end

local function eraselaser(self, y)
	local sx,sy,w,h = tilemap.get_bounds("level#map")

	for n = sx + 1, sx + w - 2 do
		tilemap.set_tile("level#map", "2", n, y, 0)
	end
end

local function addlaser(self, y)
	table.insert(self.laser, y)
	
	local sx,sy,w,h = tilemap.get_bounds("level#map")
	
	tilemap.set_tile("level#map", "2", sx, y, 25)
	tilemap.set_tile("level#map", "2", sx + w - 1, y, 27)
end

local function addplatform(self, y)
	local pos = vmath.vector3(math.random(64, 100), (y * 16) - 8, 0.1)
	local newplatform = factory.create("#platform_factory", pos, nil, {}, 1)
	table.insert(self.platform, newplatform)
end

local function addenemy(self, y)
	local pos = vmath.vector3(72, (y * 16) - 8, 0.1)
	local newenemy = factory.create("#enemy_factory", pos, nil, {}, 1)
	table.insert(self.enemy, newenemy)
end

function update(self, dt)
	self.time = self.time + 2
	if self.time > 100 then self.time = 0 end
	
	if self.time == 60 then
		local near = false
		
		for k in pairs (self.laser) do
			drawlaser(self, self.laser [k])
			local d = math.abs((data.playerpos.y/16) - self.laser[k])
			if d < 8 then near = true end
		end
		if near then msg.post("main:/sound#laser", "play_sound", {gain = 1.0}) end
	elseif self.time == 100 then
		for k in pairs (self.laser) do
			eraselaser(self, self.laser [k])
		end
	end
end

function generate(self)
	local x,y,w,h = tilemap.get_bounds("level#map")
	
	for m = y, y + 11 do
		for n = 1, w do
			tilemap.set_tile("level#map", "main", n, m, math.random(1,2))
		end
	end

	for n = y + 12, h do
		tilemap.set_tile("level#map", "main", x, n, math.random(1,2))
		tilemap.set_tile("level#map", "main", x + w - 1, n, math.random(1,2))
	end

	for n = y + 14, h - 20 do
		local m = math.fmod(n, 6)
		
		if m == 0 then
			local max = 6
			local t = math.random(1, max)
			if t == 3 then
				tilemap.set_tile("level#map", "main", x + 1, n, 3)
				tilemap.set_tile("level#map", "main", w - 1, n, 3)
				for u = x + 2, w - 2 do
					tilemap.set_tile("level#map", "main", u, n, 4)
				end
			elseif t == 6 and n > 20 then
				addplatform(self, n)
			else			
				local r = math.random(x + 1, w - 2)
				tilemap.set_tile("level#map", "main", r, n, 3)
				if math.random(1,2) == 1 or data.level < 4 then
					tilemap.set_tile("level#map", "main", r + 1, n, 3)
				end
			end
		elseif m == 3 and n > 20 then
			local r = math.random(1, 4)
			if r == 1 then
				local r = math.random(x + 1, w - 1)
				tilemap.set_tile("level#map", "main", r, n, 17)
			elseif r == 2 and data.level > 2 then
				addlaser(self, n)
			elseif r == 3 and data.level > 4 then
				local r = math.random(x + 1, w - 1)
				tilemap.set_tile("level#map", "main", r, n, 18)
			elseif r == 4 and data.level > 6 then
				addenemy(self, n)
			end
		end
	end

	msg.post("view#osd", "show_level", {})
	msg.post("main:/sound#complete", "play_sound", {gain = 1.0})
end

function on_message(self, message_id, message, sender)
    if message_id == hash("generate") then
    	reset(self)
    	generate(self)
	end
end
