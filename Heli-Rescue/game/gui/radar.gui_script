local data = require ("main.data")

local MAX_BLIPS = 9
local SCALE = 4
local RADIUS = 14

function init(self)
	self.slot = 1
	self.blips = {}
	for b = 1, MAX_BLIPS do
		self.blips[b] = vmath.vector3(0,0,0)
	end
end

local function translate(pos)
	pos.x = pos.x / SCALE
	pos.y = pos.y / SCALE

	local len = math.sqrt((pos.x * pos.x) + (pos.y * pos.y))

	if len > RADIUS then
		local d = len / RADIUS
		pos.x = pos.x / d
		pos.y = pos.y / d
	end
	return pos
end
	
local function draw_blip(self, blip, origin)
	local node = gui.get_node(string.format("blip%d", blip))
	if self.blips[blip].x ~= 0 then
		local pos = translate(self.blips[blip] - origin)

		gui.set_position(node, pos)
		gui.set_color(node, vmath.vector4(165/255,41/255,41/255,0.75))
	else
		gui.set_color(node, vmath.vector4(0,0,0,0))
	end
end
	
function update(self, dt)
	local origin = data.world2tile(data.playerpos)
	for b = 1, MAX_BLIPS do
		if self.blips[b].x ~= nil then
			draw_blip(self, b, origin)
		end
	end
	gui.set_position(gui.get_node("base"), translate(data.world2tile(data.basepos) - origin))
end

local function remove(self, pos)
	for b = 1, MAX_BLIPS do
		if self.blips[b].x == pos.x and self.blips[b].y == pos.y then
			self.blips[b].x = 0
		end
	end
end	

function on_message(self, message_id, message, sender)
	if message_id == hash("blip") then
		self.blips[self.slot] = message.xy
		self.slot = self.slot + 1
	elseif message_id == hash("remove") then
		remove(self, message.pos)
	end
end

