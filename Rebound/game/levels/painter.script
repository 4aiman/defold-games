local data = require ("main.data")

local function floor()
	local p1 = math.random(9, 12)
	local p2 = math.random(13, 16)

	sx, sy, w, h = tilemap.get_bounds("#level")
	
	for y = 1, h do
		for x = 1, w do
			t = tilemap.get_tile("#level", "floor", x, y)
			if t == 20 then tilemap.set_tile("#level", "floor", x, y, p1)
			elseif t == 21 then tilemap.set_tile("#level", "floor", x, y, p2)
			end
		end
	end
end

local function blocks(self)
	data.blocks = 0
	
	sx, sy, w, h = tilemap.get_bounds("#level")
	
	for y = 1, h do
		for x = 1, w do
			t = tilemap.get_tile("#level", "top", x, y)
			if t == 18 then
				tilemap.set_tile("#level", "top", x, y, math.random(81, 83))
				data.blocks = data.blocks + 1
			elseif t == 89 then
				data.blocks = data.blocks + 1
			elseif t == 24 then
				self.ballstart = vmath.vector3((x * 32) - 16, (y * 32) - 16, 1)
				msg.post("common/ball", "position", {pos = self.ballstart})
				tilemap.set_tile("#level", "top", x, y, 0)
			elseif t == 25 then
				self.batstart = vmath.vector3((x * 32) - 16, (y * 32) - 16, 1)
				msg.post("common/player", "position", {pos = self.batstart})
				tilemap.set_tile("#level", "top", x, y, 0)
			end
		end
	end
end

local function walls(self)
	sx, sy, w, h = tilemap.get_bounds("#level")
	local p = {
		0,0,0,0,38,
		0,0,0,1,37,
		0,0,1,0,52,
		0,0,1,1,35,
		0,1,0,0,36,
		0,1,0,1,53,
		0,1,1,0,33,
		0,1,1,1,34,		
		1,0,0,0,68,
		1,0,0,1,67,
		1,0,1,0,69,
		1,0,1,1,51,
		1,1,0,0,65,
		1,1,0,1,66,
		1,1,1,0,49,
		1,1,1,1,50}
				
	for y = 2, h - 1 do
		for x = 2, w - 1 do
			local t = tilemap.get_tile("#level", "top", x, y)

			if t == 32 then
				local n = tilemap.get_tile("#level", "top", x, y+1)
				local e = tilemap.get_tile("#level", "top", x+1, y)
				local s = tilemap.get_tile("#level", "top", x, y-1)
				local w = tilemap.get_tile("#level", "top", x-1, y)
	
				if n >= 32 then n = 1 else n = 0 end
				if e >= 32 then e = 1 else e = 0 end
				if s >= 32 then s = 1 else s = 0 end
				if w >= 32 then w = 1 else w = 0 end
					
				local c = 1
									
				while p[c] ~= n or p[c+1] ~= e or p[c+2] ~= s or p[c+3] ~= w do
					c = c + 5
				end
					
				tilemap.set_tile("#level", "top", x, y, p[c+4])
			end
		end
	end
end

local function shadows()
	sx, sy, w, h = tilemap.get_bounds("#level")
	
	for y = 2, h - 1 do
		for x = 2, w - 1 do
			data.resolveshadow("#level", x, y)
		end
	end
end

function init(self)
	self.batstart = vmath.vector3(0,0,0)
	self.ballstart = vmath.vector3(0,0,0)
	floor()
	walls()
	blocks(self)
	shadows()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("reset") then
		msg.post("common/ball", "position", {pos = self.ballstart})
		msg.post("common/player", "position", {pos = self.batstart})
	end	
end



