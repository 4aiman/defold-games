local data = require ("main.data")

local CEILING = 234
local UPDOWN_SPEED = 50
local HOVER_SPEED = 50
local OFFSET = 100
local ACCEL = 2
local EJECT_TIME = 100

local function position(self, dt)
	local pos = go.get_position()
		
	if self.vel.x < -(data.TOP_SPEED / 8) then self.vel.x = -(data.TOP_SPEED / 8)
	elseif self.vel.x > data.TOP_SPEED then self.vel.x = data.TOP_SPEED
	end

	data.speed = self.vel.x

	if data.fuel == 0 or data.state == data.STATE_EJECTED and not self.landed then
		self.vel.y = -UPDOWN_SPEED
	end

	pos = pos + self.vel * dt
	if pos.y > CEILING then pos.y = CEILING end	
	if pos.x > (640 * 16) then data.fuel = data.fuel - 1 end
	if pos.x < 100 then pos.x = 100 end
	
	local p = vmath.vector3(pos.x - self.scrollin - OFFSET - (self.vel.x/10), 0, 0)
	
	msg.post("view", "look_at", {pos = p})
	msg.post("sky", "look_at", {pos = p})
	
	go.set_position(pos)
		
	data.playerpos = vmath.vector3(pos.x, pos.y, pos.z)
	
	self.vel = vmath.vector3(self.vel.x, 0, 0)
end

local function reset(self)
	self.vel = vmath.vector3(0, 0, 0)
	self.landed = true
	self.vol = 0
	self.scrollin = -100
	self.eject = 0
	go.set_position(vmath.vector3(224, 37, 0.95))
	data.state = data.STATE_PLAYING
	data.rockets = data.MAX_ROCKETS
	data.bombs = data.MAX_BOMBS
	data.fuel = 100
	data.hull = 100
	data.score = 0
	data.nocarrier = false
	position(self, 0)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	reset(self)
	msg.post("main:/sound#jetnoise", "play_sound", {gain = 0.0})	
	msg.post("main:/sound#siren", "play_sound", {gain = 1.0})	
end

local function updatejetnoise (self)
	local v = 0

	if data.state == data.STATE_PLAYING or
	   data.state == data.STATE_EJECTED then 
		v = self.vel.x / data.TOP_SPEED
		v = 0.1 + (v / 8)
	else v = 0 end
	
	msg.post("main:/sound#jetnoise", "set_gain", {gain = v})
end

local function dead(self)
	if data.state ~= data.STATE_DEAD then
		particlefx.play("#pfx")
		sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		msg.post("osd", "gameover", {})
		msg.post("main:/sound#exp_large", "play_sound", {gain = 1.0})
		msg.post("#co", "disable", {})
		data.state = data.STATE_DEAD
		self.vel.x = 0
		
		if self.eject > 0 then data.score = data.score + 1000 end
	end
end

local function updateplane(self, dt)
	if self.vel.x >= HOVER_SPEED then
		msg.post("#sprite", "play_animation", {id = hash("flight")})
	else
		msg.post("#sprite", "play_animation", {id = hash("hover")})
	end

	if not self.landed then data.fuel = data.fuel - 0.01 end
	
	if data.fuel < 0 then data.fuel = 0 end
	
	if data.hull <= 0 then
		data.hull = 0
		dead(self)
	end
	
	position(self, dt)
end

local function checkforflak(self)
	local p = go.get_position()
	p.x = math.floor(p.x / 16) + 1
	p.y = math.floor(p.y / 16) + 1

	t = tilemap.get_tile("level#map", "main", p.x, p.y)
	
	if t >= 26 and t <= 32 then
		tilemap.set_tile("level#map", "main", p.x, p.y, 0)
		data.hull = data.hull - 10
		msg.post("main:/sound#takeflak", "play_sound", {gain = 0.5})	
	end	
end

local function moveup(self)
	self.vel.y = UPDOWN_SPEED + (self.vel.x / 2)
	self.landed = false
end

local function movedown(self)
	if not self.landed then self.vel.y = -(UPDOWN_SPEED + (self.vel.x / 2)) end 
end

local function moveleft(self)
	if not self.landed then self.vel.x = self.vel.x - ACCEL end
end

local function moveright(self)
	if not self.landed and data.playerpos.x < (data.retcar.x * 16) - 80 then
		self.vel.x = self.vel.x + ACCEL
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING or
	   data.state == data.STATE_EJECTED then
		updateplane(self, dt)
	end
	
	checkforflak(self)
	updatejetnoise(self)
	
	if self.scrollin < 0 then self.scrollin = self.scrollin + 0.5 end
	if self.eject > 0 then self.eject = self.eject - 1 end

	if data.playerpos.x > (data.retcar.x * 16) - 80 and
		self.vel.x > (data.TOP_SPEED / 4) and
		not data.nocarrier then 
		moveleft(self)
	end
end

local function firerocket(self)
	if data.rockets > 0 and not self.landed then
		local p = go.get_position()
		p.z = p.z - 0.1
		local rocket = factory.create("#rocket_factory", p, nil, {}, 1)
		data.rockets = data.rockets - 1
		msg.post("main:/sound#rocket", "play_sound", {gain = 1.0})
	end
end

local function dropbomb(self)
	if data.bombs > 0 and not self.landed then
		local p = go.get_position()
		p.z = p.z - 0.1		
		local bomb = factory.create("#bomb_factory", p, nil, {speed = self.vel.x}, 1)
		data.bombs = data.bombs - 1
	end
end

local function eject(self)
	if not self.landed then
		msg.post("eject", "show", {pos = go.get_position()})
		data.state = data.STATE_EJECTED
		self.eject = EJECT_TIME
	end
end

local function resolvecollision(self, message)
	local correction = vmath.vector3(0,0,0)

    if message.distance > 0 then
        local proj = vmath.project(correction, message.normal * message.distance)
        if proj < 1 then
            local comp = (message.distance - message.distance * proj) * message.normal
            go.set_position(go.get_position() + comp)
            correction = correction + comp
        end
    end
    
    self.landed = true
    self.vel.x = 0
    
    if data.state == data.STATE_EJECTED then
    	data.state = data.STATE_DEAD
    	msg.post("osd", "gameover", {})
	end
    
    if data.playerpos.x > (500 * 16) and data.state ~= data.STATE_COMPLETED then
    	data.state = data.STATE_COMPLETED
		msg.post("osd", "completed", {})
		data.score = data.score + 2500
    end	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("landing") then
			resolvecollision(self, message)
		else
			dead(self)
		end
	end
	
	if data.state == data.STATE_PLAYING then
		if message_id == hash("move_up") then moveup(self)
		elseif message_id == hash("move_down") then movedown(self)
		elseif message_id == hash("move_left") then moveleft(self)
		elseif message_id == hash("move_right") then moveright(self)
		elseif message_id == hash("fire_rocket") then firerocket(self)
		elseif message_id == hash("drop_bomb") then dropbomb(self)
		elseif message_id == hash("eject") then eject(self) 
		end
	end
end

local function inputplaying(self, action_id, action)
	if action_id == hash("key_up") then moveup(self)
	elseif action_id == hash("key_down") then movedown(self)
	elseif action_id == hash("key_left") then moveleft(self)
	elseif action_id == hash("key_right") then moveright(self)
	elseif action_id == hash("key_fire") and action.pressed then firerocket(self)
	elseif action_id == hash("key_bomb") and action.pressed then dropbomb(self)
	elseif action_id == hash("eject") and action.pressed then eject(self)
	elseif action_id == hash("clicktap") and action.pressed then
		msg.post("joypad", "clicktap", {x = action.x, y = action.y})
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		inputplaying(self, action_id, action)
	elseif data.state == data.STATE_DEAD or 
		data.state == data.STATE_COMPLETED then
		if action.pressed then
			msg.post("osd", "clicktap", {x = action.x, y = action.y})
		end
	end
end




