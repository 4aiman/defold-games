go.property("ai_on", 0)

local data = require ("main.data")

local MAX_TURN = 0.04
local ACCEL_SPEED = 0.1
local MAX_SPEED = 7
local MAX_REVERSE = -2
local STEER_THRESHOLD = 1

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.14, 0.71, 0.06, 1) } )
	
	if self.ai_on == 1 then
		sprite.set_constant("#sprite", "tint", vmath.vector4(0,0,0,0))
	else
		sprite.set_constant("#sprite1", "tint", vmath.vector4(0,0,0,0))
	end	
	
	self.dir = 0
	self.targetdir = math.pi/2
	self.speed = 0
	self.lastpos = vmath.vector3()
	self.steerpos = 0
	self.url_level = string.format("track%d:/track#tilemap", data.level)
	self.state = 0
	self.sector = 0
	self.laptime = 0
	self.lapbest = 9999
	self.lap = 1
	
	self.left = 0
	self.right = 0
	self.accel = 0
	self.brake = 0
	
	self.leftskid = 0
	self.rightskid = 0
	
	if self.ai_on == 1 then
		self.boost = (math.random() / 3)
	else
		self.boost = 0
	end
	
	msg.post("view#osd", "lap", {lap = self.lap})
	
	--particlefx.play("#tiresmoke")
end

function final(self)
end

function checkwrongway(self)
	local pos = go.get_position()
	local tc = tilemap.get_tile(self.url_level, "control", (pos.x + 16) / 32, (pos.y + 16) / 32)
		
	if tc >= 113 and tc <= 120 then
		local d = tc - 113
		d = d * (math.pi / 4)
	
		if math.abs(self.dir - d) > math.pi then
			if d > self.dir then
				d = d - (math.pi * 2)
			else
				d = d + (math.pi * 2)
			end
		end

		if math.abs(self.dir - d) > math.pi * 0.6 then
			msg.post("view#osd", "wrongway", {})
		else
			msg.post("view#osd", "rightway", {})
		end
	end
end

function handlesectors(self)
	local pos = go.get_position()
	local tc = tilemap.get_tile(self.url_level, "control", (pos.x + 16) / 32, (pos.y + 16) / 32)

	if tc == 121 then	
		if self.sector == 0 then
			self.sector = 1
			self.laptime = 0	
		elseif self.sector == 3 then
			self.sector = 1
			if self.laptime < self.lapbest then
				self.lapbest = self.laptime
				if self.ai_on == 0 then
					msg.post("view#osd", "lapbest", {time = self.lapbest})
					msg.post("sound#levelup", "play_sound", {gain = 1.0})					
				end
			end
			self.laptime = 0
			if self.lap < data.MAX_LAPS then
				self.lap = self.lap + 1
			else
				msg.post("/bridge#script", "finished", {ai = self.ai_on})
				if self.ai_on == 0 then
					self.state = 2
				end
			end

			if self.ai_on == 0 then
				msg.post("view#osd", "lap", {lap = self.lap})
			end
		end
	elseif tc == 122 and self.sector == 1 then
		self.sector = 2
	elseif tc == 123 and self.sector == 2 then
		self.sector = 3
	end
end

function skids(self)
	if self.left == 1 then self.leftskid = self.leftskid + 1
	else self.leftskid = 0
	end

	if self.right == 1 then self.rightskid = self.rightskid + 1
	else self.rightskid = 0
	end
	
	if self.leftskid == 20 or self.rightskid == 20 and self.speed > (MAX_SPEED * 0.8) then
		if math.random() < 0.5 then
			msg.post("sound#skid1", "play_sound", {gain = 1.0})
		else
			msg.post("sound#skid2", "play_sound", {gain = 1.0})
		end
	end
end

function update(self, dt)
	if self.dir > math.pi then
		self.dir = self.dir - (math.pi * 2)
	elseif self.dir < -math.pi then
		self.dir = self.dir + (math.pi * 2)
	end
	
	if self.ai_on == 1 and self.state > 0 then
		ai(self)
	elseif self.state == 1 then
		self.laptime = self.laptime + dt
		if self.sector > 0 then
			msg.post("view#osd", "laptime", {time = self.laptime})
		end
	end

	if self.left == 1 then turn_left(self)
	elseif self.right ==1 then turn_right(self)
	else self.steerpos = 0
	end
		
	if self.accel == 1 then
		accel(self)
	elseif self.brake == 1 then
		brake(self)
	elseif self.ai_on == 0 then
		self.speed = self.speed * 0.98
		if self.speed < 0.5 and self.speed > -0.5 then
			self.speed = 0
		end
	end

	local pos = go.get_position()
	local r = vmath.quat_rotation_z(self.dir)
	go.set_rotation(r, "#sprite")

	if self.speed > MAX_SPEED + self.boost then
		self.speed = self.speed - 0.1
	elseif self.speed < MAX_REVERSE then
		self.speed = MAX_REVERSE	
	end
		
	local velocity = vmath.vector3(math.cos(self.dir) * self.speed, math.sin(self.dir) * self.speed, 0)

	local tw = tilemap.get_tile(self.url_level, "world", (pos.x + 16) / 32, (pos.y + 16) / 32)

	if tw == 177 then
		self.speed = self.speed * 0.95
	end
	
	handlesectors(self)

	if self.ai_on == 0 then
		checkwrongway(self)
		--skids(self)
	end
	
	self.left = 0
	self.right = 0
	self.accel = 0
	self.brake = 0
	
    go.set_position(pos + velocity)
    self.correction = vmath.vector3()
    
	msg.post("view", "look_at", { position = go.get_position() })    
end

function turn_left(self)
	if self.speed < STEER_THRESHOLD and self.speed > -STEER_THRESHOLD then
		self.dir = self.dir + (math.abs(self.speed) / 25)
	else
		self.dir = self.dir + MAX_TURN
	end
end

function turn_right(self)
	if self.speed < STEER_THRESHOLD and self.speed > -STEER_THRESHOLD then
		self.dir = self.dir - (math.abs(self.speed) / 25)
	else
		self.dir = self.dir - MAX_TURN
	end
end

function accel(self)
	self.speed = self.speed + ACCEL_SPEED
end

function brake(self)
	self.speed = self.speed - 0.1
end

function ai(self)
	local pos = go.get_position()
	local t = tilemap.get_tile(self.url_level, "control", (pos.x + 16) / 32, (pos.y + 16) / 32)
	
	if t >= 113 and t <= 120 then
		t = t - 113
		self.targetdir = t * (math.pi / 4)
	end
	
	if math.abs(self.dir - self.targetdir) > math.pi then
		if self.targetdir > self.dir then
			self.targetdir = self.targetdir - (math.pi * 2)
		else
			self.targetdir = self.targetdir + (math.pi * 2)
		end
	end
	
	if self.dir < self.targetdir then
		turn_left(self)
	elseif self.dir > self.targetdir then
		turn_right(self)
	end	
	
	local d = math.abs(self.dir - self.targetdir)

	if (t == 124 or d > 0.6) and self.speed > (MAX_SPEED * 0.75) then
		brake(self)
	else
		accel(self)
	end
	
	if d < MAX_TURN then
		self.dir = self.targetdir
	end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("contact_point_response") then
        if message.distance > 0 then
            local proj = vmath.project(self.correction, message.normal * message.distance)
            if proj < 1 then
				local pos = go.get_position()
                local comp = (message.distance - message.distance * proj) * message.normal
                go.set_position(go.get_position() + comp)
                self.correction = self.correction + comp
                
                if message.group == hash("world") then                
					local i = pos - go.get_position()
					local d = math.sqrt((i.x * i.x) + (i.y * i.y))
					self.speed = self.speed - (d / 4)
					if self.speed < 0 then
						self.speed = 0
					end
				end
	        end
        end
    end

	if message_id == hash("start") then
		self.state = 1
	elseif message_id == hash("set_position") then
		go.set_position(message.pos)
	elseif message_id == hash("set_rotation") then
		self.dir = message.rot
	end
end

function on_input(self, action_id, action)
	if self.ai_on == 1 then return end

	if action_id == hash("quit") and action.pressed then
		msg.post("main:/handler", "show_menu", {})
	end
	
	if action_id == hash("exit") and action.pressed then
		msg.post("main:/handler", "show_menu", {})
	end

	if action_id == hash("select") and action.pressed and self.state == 2 then
		msg.post("main:/handler", "show_menu", {})
	end

	if self.state ~= 1 then return end

	if action_id == hash("brake") then
		self.brake = 1
	elseif action_id == hash("accel") then
		self.accel = 1
	end
	
	if action_id == hash("turn_left") then
		self.left = 1
	elseif action_id == hash("turn_right") then
		self.right = 1
	end
end
