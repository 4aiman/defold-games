local data = require ("main.data")

local function disablenode (self, node)
	gui.set_enabled(node, false)
end

local function levelbox(self)
	for l = 1, 12 do

		gui.set_text(gui.get_node(string.format("template%d/number", l)), tostring(l))

		if data.leveloffset == 24 then
			gui.set_color(gui.get_node(string.format("template%d/button", l)), vmath.vector4(255/255, 110/255, 71/255, 1))
		elseif data.leveloffset == 12 then
			gui.set_color(gui.get_node(string.format("template%d/button", l)), vmath.vector4(190/255, 52/255, 81/255, 1))
		else
			gui.set_color(gui.get_node(string.format("template%d/button", l)), vmath.vector4(40/255, 200/255, 104/255, 1))
		end
		
		gui.set_enabled(gui.get_node(string.format("template%d/ball1", l)), false)
		gui.set_enabled(gui.get_node(string.format("template%d/ball2", l)), false)
		gui.set_enabled(gui.get_node(string.format("template%d/ball3", l)), false)
		gui.set_enabled(gui.get_node(string.format("template%d/holder", l)), false)
		
		if data.progress[l + data.leveloffset - 1] ~= 0 or l == 1 then
			gui.set_enabled(gui.get_node(string.format("template%d/padlock", l)), false)
			gui.set_enabled(gui.get_node(string.format("template%d/number", l)), true)
			if data.progress[l + data.leveloffset] >= 1 then gui.set_enabled(gui.get_node(string.format("template%d/ball1", l)), true) end
			if data.progress[l + data.leveloffset] >= 2 then gui.set_enabled(gui.get_node(string.format("template%d/ball2", l)), true) end
			if data.progress[l + data.leveloffset] >= 3 then gui.set_enabled(gui.get_node(string.format("template%d/ball3", l)), true) end
			gui.set_enabled(gui.get_node(string.format("template%d/holder", l)), true)
		else
			gui.set_enabled(gui.get_node(string.format("template%d/padlock", l)), true)
			gui.set_enabled(gui.get_node(string.format("template%d/number", l)), false)
		end
	end

	gui.set_enabled(gui.get_node("template1/padlock"), false)
end

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(0, 0, 0), gui.EASING_INOUTQUAD, 0.5)
	levelbox(self)
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(448, 0, 0), gui.EASING_INOUTQUAD, 0.5, 0, disablenode)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("main:/sound#music", "play_sound", {gain = 1.0})
	self.node = gui.get_node("container")
	gui.set_position(self.node, vmath.vector3(448, 0, 0))
	gui.set_enabled(self.node, false)
end

local function processclick(self, x, y) 
	if gui.pick_node(gui.get_node("back"), x, y) then
		hide(self)
		msg.post("#mainmenu", "show", {})
		msg.post("main:/sound#tap", "play_sound", {gain = 1.0})
	end

	for l = 1, 12 do
		if gui.pick_node(gui.get_node(string.format("template%d/button", l)), x, y) then
			if data.progress[l + data.leveloffset - 1] ~= 0 or l == 1 then
				data.level = l + data.leveloffset
				msg.post("main:/sound", "stop_sound") 
				msg.post("main:/handler", "show_game")
			end
		end
	end
end 

function on_input(self, action_id, action)
	if action_id == hash("tap") and action.pressed then
		processclick(self, action.x, action.y)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
	end
end